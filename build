#!/bin/bash
#
# Build script
#
# Support script to automate software builds outside of base distribution
# packages
#
# Copyright 2011-2017 Mark Verboom
#
# This file is part of Build.
# 
#     Build is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     Build is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Build.  If not, see <http://www.gnu.org/licenses/>.

require_software() {
   echo awk grep git wget fakeroot bzip2
}

distro_get() {
   if test "$( which dpkg-query)"
   then
      echo debian
      exit 0
   fi
   echo unknown
   exit 1
}

recipe_item_get() {
   local recipe=$RECIPEDIR/$1.recipe
   local label=$2
   local item=$3
   local value
   value = $( recipe_section_get $1 $label | grep "^${item}=" )
   echo $value
   test "$value" = "" && return 0 || return 1
}

recipe_section_get() {
   local recipe=$RECIPEDIR/$1.recipe
   local label=$2
   local opt=$3

   test ! -f $recipe && { test "$opt" = "" && { >&2 output "Recipe $recipe does not exist."; exit 1; } }

   grep "^\[$label\]" $recipe > /dev/null 2>&1  || { test "$opt" = "" &&  { >&2 output "No section $label found in recipe $recipe"; exit 1; } }
   awk "BEGIN {found=0;} /^\[/ {found=0;} {if (found==1) { print \$0;}}; /^\[$label\]/ { found=1;}" $recipe
}

build_require() {
   local pkgs=$*
   local missing=0
   local toinst=""
   local toinsttr=""
   local pkg

   for pkg in $pkgs
   do
      dpkg-query -s ${pkg/*@/} > /dev/null 2>&1
      if test $? -ne 0
      then
         test $QUIET -eq 0 && output "Package $pkg required for build, but not installed."
         if test "$INSTDEP" = "yes" 
         then
            test "$pkg" = "${pkg/*@/}" && toinst="$toinst $pkg" || toinsttr="$toinsttr $pkg"
         else
            missing=1
         fi
      fi
   done
   test "$toinst" != "" && { sudo apt-get -qq -y install $toinst > /dev/null 2>&1 || { output "Error installing dependancies ($toinst)."; return 1 ;} }
   test "$toinsttr" != "" && for pkg in $toinsttr
   do
      sudo apt-get -qq -y -t ${pkg/@*/} install ${pkg/*@/}  > /dev/null 2>&1 || { output "Error installing dependancy ($pkg)."; return 1 ; }
   done
   test $missing -eq 1 && return 1
}

build_require_remove() {
   local pkgs="$1"
   local pkg
   for pkg in $pkgs
   do
      list="$list ${pkg/*@/}"
   done
   sudo apt-get -qq -y --purge remove $list > /dev/null
   sudo apt-get -qq -y --purge autoremove > /dev/null
}

build() {
   B_NAME=$1
   B_VERSION=$2
   if test "$B_INSTANCE" != ""
   then
      versiondir=$B_VERSION-$B_INSTANCE
   else
      versiondir=$B_VERSION
   fi
   local pkgs=$( recipe_section_get $B_NAME REQUIRED opt )
   test $? -eq 0 &&  build_require $pkgs

   test "$B_INSTANCE" != "" && ID=${B_NAME}_${B_VERSION}-${B_INSTANCE}_${B_ARCH} || ID=${B_NAME}_${B_VERSION}_${B_ARCH}
   B_BUILDNR=$( package_buildnr_get $ID )
   local CMD=$( recipe_section_get $B_NAME BUILD ) || return 1
   test $? -ne 0 && { output $CMD ; return 1; }
   local TMP=$( mktemp -p $TMPDIR -d )
   B_INSTALLDIR=$DESTDIR/$B_ARCH/$B_NAME-$versiondir
   test $FORCE -eq 1 && rm -rf $B_INSTALLDIR
   mkdir -p $B_INSTALLDIR
   # Define build environment variables and functions
   B_CACHEDIR=$CACHEDIR
   test -d ${RECIPE/.recipe/.files\/B_BUILD} && B_FILES=${RECIPE/.recipe/.files\/B_BUILD}
   B_PKGLIST=$PKGLIST
   # export B_VERSION B_INSTALLDIR B_ARCH B_DESTDIR B_INSTANCE B_CACHEDIR B_NAME B_BUILDNR B_PKGLIST
   export B_VERSION B_INSTALLDIR B_ARCH B_INSTANCE B_CACHEDIR B_NAME B_BUILDNR B_FILES
   B_GET() {
      test $# -ne 3 && { >&2 echo "Insufficient arguments to B_GET."; exit 1; }
      local method=$1
      local url=$2
      local fn=$3
      local targetdir=$B_CACHEDIR/$B_ARCH/$B_NAME-$B_VERSION
      local target=$targetdir/$fn
      case $method in
      "http")
         if ! test -f $target
         then
            test -d $targetdir || mkdir -p $targetdir
            echo "Http downloading files.."
            wget -q -O $target $url || rm $target
         fi
         cp $target $fn
      ;;
      "git")
         if ! test -f $target
         then
            test -d $targetdir || mkdir -p $targetdir
            mkdir /tmp/git-dl.$$
            cd /tmp/git-dl.$$
            echo "Git downloading files.."
            git clone $url $fn
            tar cfz $target $fn
            cd - > /dev/null
            rm -rf /tmp/git-dl.$$
         fi
         tar xzf $target
      ;;
      esac
   }
   export -f B_GET
   B_UPDATEPKGBLD() {
      test -f ~/.buildrc && . ~/.buildrc
      if test "$B_INSTANCE" != ""
      then
         local ID=${B_NAME}_${B_VERSION}-${B_INSTANCE}_${B_ARCH}
      else
         local ID=${B_NAME}_${B_VERSION}_${B_ARCH}
      fi
      grep "^$ID" $PKGLIST > /dev/null && sed -i "/^$ID/d" $PKGLIST
      echo -e "$ID\t$B_BUILDNR" >> $PKGLIST
   }
   export -f B_UPDATEPKGBLD

   output "Building $B_NAME version $B_VERSION."
   cd $TMP
   test "$QUIET" = "1" && bash $DEBUG -e -c "$CMD" > /dev/null 2>&1 || bash $DEBUG -e -c "$CMD"
   result=$?
   cd - > /dev/null
   rm -rf $TMP
   test "$pkgs" != "" -a "$DEINSTDEP" = "yes" && build_require_remove "$pkgs"
   if test $result -ne 0
   then
      output "Build of $B_NAME failed."
      rm -rf $B_INSTALLDIR
      return 1
   else
      output "Build complete."
   fi
}

usage() {
   echo "Usage: build [OPTION...] [RECIPE]"
   echo
   echo "Operation mode:"
   echo "   -b  Run the build section for a recipe (build/compile software)."
   echo "   -p  Run the package section for a recipe (package software)."
   echo "   -c  Run the version section for a recipe (check version)."
   echo "   -a  Build/package all recipes where auto build is set (autobuild)."
   echo
   echo "Operation options:"
   echo "   -v  Specify specific version for action. If not specified, latest version will be used."
   echo "   -x  Enable verbose output"
   echo "   -q  Quiet"
   echo "   -f  Force build process, even if version already exists"
   echo "   -i  Specify an instance to build"
   echo "   -h  This help message"
   echo
   exit 1
}

arch_get() {
   case $(uname -m) in
   "i686")
     echo i386
     ;;
   "x86_64")
     echo amd64
   esac
}

package_buildnr_get() {
   ID=$1
   test -f $PKGLIST || touch $PKGLIST
   BUILDNR=$(grep "^$ID" $PKGLIST | cut -d'	' -f 2 )
   test "$BUILDNR" = "" && BUILDNR=0
   echo $(( $BUILDNR + 1 ))
}

package_torepo() {
   packages_torepo[$1]="${packages_torepo[$1]} $2"
}

package_torepo_copy() {
   local type
   local options=""

   test $QUIET -eq 1 && options="$options -q"

   for type in ${!packages_torepo[@]}
   do
      case "$type" in
      "deb")
         $TODEBREPO $options ${packages_torepo[$type]}
      ;;
      *)
         output "Copy to repository not implemented for type $type"
         return 1
      ;;
      esac
   done
}


package_torepo_old() {
   local type=$1
   shift
   local pkgname=$*
   case "$type" in
   "deb")
      test $QUIET -ne 1 && $TODEBREPO $pkgname || $TODEBREPO -q $pkgname
   ;;
   *)
      output "Copy to repository not implemented for type $type"
      return 1
   ;;
   esac
}

package() {
   test "$PKGDIR" = "" && { output "PGKDIR not defined, aborting."; return 1; }
   test -d $PKGDIR || { output "PKGDIR $PKGDIR does not exist, aborting."; return 1; }

   local pkg=$1

   local version=$( version_get $pkg ) || return 1
   test "$FORCEVERSION" != "" && local version=$FORCEVERSION
   if test "$B_INSTANCE" != ""
   then
      ID=$pkg-$version-$B_INSTANCE
   else
      ID=$pkg-$version
   fi
   test ! -d "$DESTDIR/$B_ARCH/$ID" && { >&2 output "Version $version of $pkg is not available for packaging." ; return 1; }

   if test "$B_INSTANCE" != ""
   then
      ID=${version}-${B_INSTANCE}
   else
      ID=${version}
   fi
   P_PKGNAME=${pkg}_${ID}_${B_ARCH}
   P_PKGDIR=${pkg}-${ID}
   P_BUILDNR=$( package_buildnr_get ${P_PKGNAME} )
   eval $( recipe_section_get $pkg PKG ) || return 1
   for pkgtype in ${type/,/ }
   do
      case $pkgtype in
      "deb")
         package_debian $pkg
      ;;
      *)
         output "Unknown package type ($pkgtype)."
         exit 1
      ;;
      esac
   done
}

package_debian() {
   local pkg=$1
   # Do we need to build the package?
   if test "$pkgready" = ""
   then
      output "Building debian package..."
      INFO=$(recipe_section_get $pkg DEB) || return 1
      test $? -ne 0 && { output $INFO ; return 1; }
      TMP=$( mktemp -p $TMPDIR -d )
      mkdir -p $TMP/DEBIAN
      pkgversion=${version//\-/}-$P_BUILDNR
      test "$PKGPOSTFIX" != "" && INFO=$( echo "$INFO" | sed "/^Package:/ s/$/-$PKGPOSTFIX/" )
      echo "$INFO" | sed "s/VERSION/$pkgversion/" | sed "s/ARCH/$B_ARCH/" > $TMP/DEBIAN/control
      cd $DESTDIR/$B_ARCH/$pkg-$version
      tar pcfB - . | (cd $TMP ; tar pxfB - )
      cd - > /dev/null
      cd $TMP
      if test -d $RECIPEDIR/$pkg.files/B_DEBIAN
      then
         ( cd $RECIPEDIR/$pkg.files/B_DEBIAN ; tar cf - . ) | tar xf -
      fi
      find . -path "*/etc/*" -type f | sed "s/^\.//" > DEBIAN/conffiles
      cd - > /dev/null
      fakeroot dpkg --build $TMP . > $TMP.buildoutput
      result=$?
      file=$( cat $TMP.buildoutput | cut -d '`' -f 3 | cut -d \' -f 1 )
      rm -rf $TMP $TMP.buildoutput
      if test $result -ne 0
      then
         output "Error while building package."
         return 1
      fi
      grep "^${P_PKGNAME}_${B_ARCH}" $PKGLIST > /dev/null && sed -i "/^${P_PKGNAME}_${B_ARCH}/d" $PKGLIST
      echo -e "${P_PKGNAME}_${B_ARCH}\t$P_BUILDNR" >> $PKGLIST
      mv $file $PKGDIR
      pkgfile=$PKGDIR/$file
   else
      if test -f "$( echo $DESTDIR/$B_ARCH/${P_PKGDIR}/*.deb )" = "$DESTDIR/$B_ARCH/${P_PKGDIR}/*.deb"
      then
         output "Recipe indicates package should be in build dir, but it isn't."
         return 1
      else
         file="$DESTDIR/$B_ARCH/${P_PKGDIR}/*.deb"
         cp $file $PKGDIR
         pkfile=$PKGDIR/$(basename $DESTDIR/$B_ARCH/${P_PKGDIR}/*.deb)
      fi
   fi
   if test "${torepo,,}" = "y"
   then
      output "Adding package to repo..."
      package_torepo $type $pkgfile
   else
      output $pkgfile
   fi
}

version_get() {
   local pkg=$1
   export B_ARCH=$( arch_get )
   B_GITVER() {
      git ls-remote --tags $1 | grep -v '{}' | grep -v -e preview -e rc | cut -d '/' -f 3  | sed "s/^v//" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -1
   }
   export -f B_GITVER
   CMD=$( recipe_section_get $pkg VERSION ) || return 1
   test $? -ne 0 && { output $CMD ; return 1; }
   ver=$( bash $DEBUG -e -c "$CMD" 2>/dev/null )
   test $? -ne 0 && { >&2 output "Error while running version command for $pkg." ; return 1 ; }
   test "$ver" = "" && { >&2 output "Version command for $pkg returned no output." ; return 1 ; }
   echo $ver
   return 0
}

parse_options() {
   ACTION= ; FORCE=0 ; QUIET=0 ; DEBUG= ; PKGS= ; FORCEVERSION=
   while test "$1" != ""
   do
      case $1 in
      "-a")
         ACTION="autobuild"
      ;;
      "-c")
         ACTION="check"
      ;;
      "-b")
         ACTION="build"
      ;;
      "-i")
         shift
         B_INSTANCE="$1"
      ;;
      "-p")
         ACTION="package"
      ;;
      "-x")
         set -x
         DEBUG=-x
      ;;
      "-q")
         QUIET=1
      ;;
      "-f")
         FORCE=1
      ;;
      "-h")
         usage
      ;;
      "-v")
         shift
         FORCEVERSION=$1
      ;;
      *)
         PKGS="$PKGS $1"
      ;;
      esac
      shift
   done
   if test "$ACTION" != "autobuild" -a "$ACTION" != "" -a "$PKGS" = ""
   then
      output "No name specified."
      exit 1
   fi
}

sanity_check() {
   missing=""
   for name in $( require_software)
   do
      if ! which $name > /dev/null 2>&1
      then
         missing="$missing $name"
      fi
   done
   test "$missing" != "" && { output "Missing required software to run script:$missing" ; exit 1;}
}

output() {
   test $QUIET -eq 1 && return
   echo "$1"
}

check_new_version() {
   local pkg=$1
   local RET=0

   version=$( version_get $pkg ) || return 1
   if test "$FORCEVERSION" != ""
   then
      if test -d "$DESTDIR/$B_ARCH/$pkg-$FORCEVERSION"
      then
         output "Version $FORCEVERSION of $pkg is available"
      else
         output  "Version $FORCEVERSION of $pkg is not available"
         RET=1
      fi
   else
      test -d "$DESTDIR/$B_ARCH/$pkg-$version" && { output "No new version of $pkg is available (current $version)." ; RET=1 ;} || output "New version ($version) of $pkg is available"
   fi
   return $RET
}

main() {
   QUIET=0
   declare -A packages_torepo
   test -f ~/.buildrc && . ~/.buildrc || { echo "No configuration file found."; exit 1;}
   sanity_check
   parse_options "$@"
   B_ARCH=$( arch_get )

   case $ACTION in
   "package")
      for pkg in $PKGS
      do
         package $pkg
      done
      package_torepo_copy
   ;;
   "check")
      RET=0
      for pkg in $PKGS
      do
         check_new_version $pkg || RET=1
      done
      exit $RET
   ;;
   "build")
      for pkg in $PKGS
      do
         version=$( version_get $pkg ) || exit 1
         test "$FORCEVERSION" != "" && version=$FORCEVERSION
         if test "$B_INSTANCE" != ""
         then
            ID=$pkg-$version-$B_INSTANCE
         else
            ID=$pkg-$version
         fi
         test -d "$DESTDIR/$B_ARCH/$ID" -a $FORCE -ne 1 && output "Version $version of $pkg is already built." || build $pkg $version
      done
   ;;
   "autobuild")
      for recipe in $RECIPEDIR/*.recipe
      do
         pkg=$( basename -s .recipe $recipe )
         autobuild=1
         local info=$( recipe_section_get $pkg INFO opt )
         eval $( echo $info | grep "^autobuild=" )
         if test $autobuild -eq 1 && test $FORCE -eq 1 || check_new_version $pkg > /dev/null
         then
            version=$( version_get $pkg ) || continue
            build $pkg $version
            test $? -ne 0 && echo "Autobuild $pkg version $version failed." || { echo "Autobuild $pkg version $version succeeded." ; package $pkg ; }
         fi
      done
      package_torepo_copy
   ;;
   *)
      echo "No action specified, nothing to do."
      usage
   ;;
   esac
}

main "$@"
