NAME

build - automate building of software

SYNOPSIS

build [OPTION]... [RECIPE]...

DESCRIPTION

Automates the building of software, although it should be considered alpha
quality software at best.

The building process is described by recipe files which are explained in the
recipe section.

Arguments that can be used are:

-c
Check version, runs the version check section of the specified recipe(s).

-b
Build, runs the build version of the specified recipe(s).

-p
Package, runs the package secition of the specified recipe(s).

-r
To repository, creates packages and copies to repository for specfified recipe(s)


-a
Select all recipes available.

-v
Specify specific version, will prevent from running version section of recipe(s)

-q
Quiet output

-x
Enable debugging output

-f
Force build for recipe, even if complete build is already available.

-i
Specify an instance for a recipe

-h
This help message


CONFIGURATION FILE

The script uses a configuration file which is located at:

~/.buildrc

The file has the following format:

VARIABLE=value

The following variable can be set in the configuration file.

DESTDIR (defaults to ~/build)
Destination directory where compiled software should be put.

CACHEDIR (defaults to ~/cache)
Download cache directory

TMPDIR (defaults to ~/temp)
Temporary build directory

BASEDIR (defaults to /opt)
Directory where software should be installed to

RECIPEDIR (defaults to ~/recipes)
Directory with recipes

PKGLIST (defaults to RECIPEDIR/pkglist)
File with package administration

PKGDIR (defaults to ~/packages)
Directory where built packages are placed

TODEBREPO
Points to script to use to publish Debian package to repository
will get -q parameter passed if build is called with -q
can be called with multiple package names in 1 go

INSTDEP (defaults to yes)
Set to yes to try and automatically install build dependancies (optional)

DEINSTDEP (defaults to yes)
Set to yes to try and automatically uninstall build dependancies (optional)

BUILDING PACKAGE

recipes/<recipename>.files/B_BUILD
If this directory exists, the B_FILES variable will be made available during the
build phase, pointing to this directory. Files here can be used during the build
of the software and could be patches, configurations etc.

recipes/<recipename>.files/B_DEBIAN
If exists, all files will be copied to the root of the package setup. This is
done after the standard control file generation. If
any package configuration files in the DEBIAN directory need to be overwritten
or added, it can be put in this directory.

RECIPE

A recipe is divided into multiple sections. The recipe layout follows the
ini file setup. The different sections are explained below.

[VERSION] (mandatory)

This section should contain commands that, when executed, return the latest
available version of the software. This usually consists of some clever wget
or git commands to figure out the version.

There currently is one supporting function to ease the proces to get a version
number for software in a github repository:

B_GITVER

An example usage can be:

B_GITVER https://github.com/project/repo

This function does some filtering to get the right version number, which may
not always work for every repository.

[BUILD] (mandatory)

This section contains all commands that are needed to download the specific
version of the software, compile/create it and install it to the destination
directory. To assist in building, the following environment variables and 
functions are made available:

VARIABLES

B_ARCH
Architecture software is being build for

B_CACHEDIR
Directory where files can be downloaded

B_NAME
Name of the software that needs to be build

B_VERSION
Version of the software being build

B_INSTANCE
Instance name of software being build (optional)

B_BUILDNR
The number of the build of this current version

B_INSTALLDIR
Software installation directory

B_FILES
Points to directory where files can be stored to use during build.

FUNCTIONS

B_GET
Download software and check if it is already in the cache.
This function supports http and git. The usage is:

B_GET method url target

Retrieving software from a website could be like this:

B_GET http https://software.com/path/v${B_VERSION}/software-${B_VERSION}.tar.gz software.tar.gz

B_UPDATEPKGBLD
Update package build number

[REQUIRED] (optional for software building)

This section can specify the required installed packages that need to be
available in order to be able to build the software. This is a space seperated
list of package names.

[PKG] (optional for package building)

This section contains some meta information on the type of package that needs
to be build from the result of the BUILD section of the recipe. The following
options can be specified:

type=<pacakge type>
This specifies the type of package that should be build. Currently supported
is:
  deb

torepo=<y|n>
When set to y the package will be pushed to a repository after the package is
created.

configfiles
Specify configfiles

FILES

~/.buildrc
Configuration file

EXAMPLES

for all recipes where there are new versions, build, package and push to repo.
  build -b -p -r -a

AUTHOR

Written by Mark Verboom

REPORTING BUGS

Prefferably by opening an issue on the github page.

COPYRIGHT

Copyright  Â©  2014  Free Software Foundation, Inc.  License GPLv3+: GNU
GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free  to  change  and  redistribute  it.
There is NO WARRANTY, to the extent permitted by law.

